generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id           String       @id @default(uuid())
  name         String
  email        String       @unique
  passwordHash String
  createdAt    DateTime     @default(now())
  role         Role         @default(USER)
  checkIns     CheckIn[] // make it plural
  restaurants  Restaurant[]

  @@map("users")
}

model CheckIn {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  validatedAt DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  gym   Gym    @relation(fields: [gymId], references: [id])
  gymId String // type> "gym Gym" and save, Prisma's gonna create it

  @@map("checkIns")
}

model Gym {
  id          String    @id @default(uuid())
  title       String
  description String?
  phone       String?
  latitude    Decimal
  longitude   Decimal
  checkIns    CheckIn[] // make it plural

  @@map("gyms")
}

model Restaurant {
  id    String @id @default(uuid())
  cnpj  String
  title String

  manager   User   @relation(fields: [managerId], references: [id])
  managerId String

  email  String
  orders Order[] //changed from Order to orders

  @@map("restaurants")
}

model Order {
  id     String       @id @default(uuid())
  status OrderStatus?

  items OrderItems[]

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
}

enum OrderStatus {
  PENDING
  WORKING
  READY_FOR_PICKUP
  ON_THE_WAY
  DELIVERED
  CANCELED
}

model OrderItems {
  id       Int     @id @default(autoincrement())
  name     String
  price    Float
  quantity Float
  obs      String?
  Order    Order?  @relation(fields: [orderId], references: [id])
  orderId  String?
}
